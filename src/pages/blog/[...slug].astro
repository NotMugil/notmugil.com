---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import BlogLayout from "@/layouts/BlogLayout.astro";
import Navigation from "@/components/Navigation.astro";
import SeoPost from "@/components/SeoPost.astro";
import { formatDate, readingTime } from "@/lib/util";
import { extractToc, type TocItem } from "@/lib/toc";

interface Props {
  entry: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const blog = await getCollection("blog");
  return blog.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const authors = await getCollection("authors");
const author = authors.find((user) => user.slug === entry.data.author);

if (!author) {
  console.warn(
    `Author data is not registered or slug doesn't exist for: ${entry.data.author}`,
  );
}

const readTime = readingTime(entry.body);
const { Content, headings } = await entry.render();

const toc: TocItem[] = extractToc(headings);
---

<BlogLayout>
  <div class="mx-auto max-w-screen-md sticky top-4 z-100">
    <Navigation />
  </div>
  <SeoPost slot="head" entry={entry} />
  <div>
    <div class="mx-auto max-w-screen-md">
      {
        entry.data.image && (
          <Image
          src={entry.data.image}
          alt={entry.data.imageAlt || ""}
          class="h-auto w-full"
          />
        )
      }
    </div>
    <h1 class="mt-3 py-4 text-center text-4xl font-bold">{entry.data.title}</h1>
    <p class="mb-6 text-center">{entry.data.description}</p>

    <!-- Blog Info -->
    <div class="flex flex-row items-center justify-center gap-2 text-gray-400">
      <p class="text-sm">{readTime}</p>
      <span class="text-sm">â€¢</span>
      <p class="text-sm">{formatDate(entry.data.publicationDate)}</p>
    </div>

    <!-- Author Info -->
    {
      author ? (
        <div class="mt-6 flex flex-col items-center justify-center gap-2">
          <div>
            {author.data.avatar && (
              <Image
                src={author.data.avatar}
                alt={author.data.name || "undefined"}
                width={40}
                height={40}
                class="h-auto rounded-full"
              />
            )}
          </div>
          <div class="flex flex-col mb-4">
            <a
              href={`/authors/${author.slug}`}
              class="text-md font-semibold text-gray-900 underline hover:text-violet-500 dark:text-gray-100"
            >
              @{author.data.name}
            </a>
            {/* {author.data.bio && (
            <p class="text-sm text-gray-500 dark:text-gray-400">
            {author.data.bio}
            </p>
            )} */}
          </div>
        </div>
      ) : (
        <div class="mt-8 flex flex-col items-center text-center">
          <div class="h-12 w-12 rounded-full bg-gray-200 dark:bg-gray-700" />
          <p class="text-lg font-semibold text-gray-900 dark:text-gray-100">
            Unknown Author
          </p>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            This author is currently not listed in our records.
          </p>
        </div>
      )
    }

    <hr class="mb-6 mt-3 opacity-5 z-0"/>

    <div class="flex flex-row mt-10">
      <aside class="ml-4 hidden md:block md:w-1/6">
        <nav class="sticky top-20">
          <h2 class="mb-4 text-lg font-bold">Table of Contents</h2>
          <ul class="space-y-2 text-sm text-gray-400">
            {
              toc.map((item) => (
                <li class={`ml-${(item.depth - 1) * 4}`}>
                  <a
                    href={`#${item.slug}`}
                    class="text-gray-400"
                  >
                    {item.text}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </aside>
      <article class="mx-auto max-w-screen md:max-w-screen-md px-3 md:px-0 prose prose-dark flex-1">
        <Content/>
      </article>
      <aside class="ml-4 hidden md:block md:invisible md:w-1/6">
        <nav class="sticky top-4">
          <h2 class="mb-4 text-xl font-bold">Table of Contents</h2>
          <ul class="space-y-2">
            {
              toc.map((item) => (
                <li class={`ml-${(item.depth - 1) * 4}`}>
                  <a
                    href={`#${item.slug}`}
                    class="text-blue-500 hover:underline"
                  >
                    {item.text}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </aside>
    </div>
  </div>
</BlogLayout>